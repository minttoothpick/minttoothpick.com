/* stylelint-disable no-descending-specificity */

:root {
  /**
   * Modular scale
   * https://every-layout.dev/rudiments/modular-scale/
   */
  --ratio: var(--line-height);
  --s05: calc(var(--s04) / var(--ratio));
  --s04: calc(var(--s03) / var(--ratio));
  --s03: calc(var(--s02) / var(--ratio));
  --s02: calc(var(--s01) / var(--ratio));
  --s01: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  /**
   * Named values from modular scale
   *
   * These values change based on media queries.
   */
  --container-space: var(--s1);
  --flow-space: var(--container-space);
  --flow-condensed: var(--s0);
  --flow-expanded: var(--s2);
  --flow-super: var(--s3);

  --font-regular: "Infini", "Lato", -apple-system, "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", sans-serif;
  /* https://qwtel.com/posts/software/the-monospaced-system-ui-css-font-stack/ */
  --font-mono: "Fira Code", ui-monospace, "Menlo", "Monaco", "Cascadia Mono", "Segoe UI Mono", "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro", "Fira Mono", "Droid Sans Mono", "Courier New", monospace;
  --line-height: 1.7;

  --text-width: 60ch;
  --container-width: calc(var(--text-width) * 1.5);
  --width-full: calc(var(--text-width) * 2);

  --font-main: var(--font-regular);
  --font-secondary: var(--font-regular);

  --font-size: 1.2rem;
  --font-size-small: 85%;

  /**
   * Colors
   */
  --color-dark: #050505;
  --color-darkish: #404040;
  --color-mid: grey;
  --color-lightish: #b3b3b3;
  --color-light: #d6d6d6;

  --color-accent: salmon;
  --color-text: var(--color-dark);
  --color-text-muted: var(--color-mid);
  --color-bg: white;

  --border-thin: var(--s04);
  --border-thick: var(--s02);

  /**
   * Root styles
   * Same as `html`, but weightier specificity.
   */
  background-color: var(--color-bg);
  color: var(--color-text);
  font-family: var(--font-main);
  /* 0.4% of screen width, but never below 1rem */
  /* font-size: calc(0.4vw + 1rem); */
  /* 1.5% of screen width, but never below 1.1rem or over 2rem */
  /* font-size: clamp(1.1rem, 1.5vw, 2rem); */
  font-size: var(--font-size, 1rem);
  line-height: var(--line-height);
}

@media (min-width: 700px) {
  :root {
    --container-space: var(--s2);
    --flow-expanded: var(--s3);
    --flow-condensed: var(--s0);
    --flow-super: var(--s4);
    --font-size: 1.4rem;
  }
}

/* Fonts
   ========================================================================== */

@font-face {
  font-display: swap;
  font-family: 'Infini';
  font-style: normal;
  font-weight: normal;
  src: url('../fonts/infini/infini-regular.eot');
  src: url('../fonts/infini/infini-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/infini/infini-regular.woff') format('woff'), url('../fonts/infini/infini-regular.woff2') format('woff2'), url('../fonts/infini/infini-regular.ttf') format('truetype'), url('../fonts/infini/infini-regular.svg#svgFontName') format('svg');
}

@font-face {
  font-display: swap;
  font-family: 'Infini';
  font-style: normal;
  font-weight: bold;
  src: url('../fonts/infini/infini-bold.eot');
  src: url('../fonts/infini/infini-bold.eot?#iefix') format('embedded-opentype'), url('../fonts/infini/infini-bold.woff') format('woff'), url('../fonts/infini/infini-bold.woff2') format('woff2'), url('../fonts/infini/infini-bold.ttf') format('truetype'), url('../fonts/infini/infini-bold.svg#svgFontName') format('svg');
}

@font-face {
  font-display: swap;
  font-family: 'Infini';
  font-style: italic;
  font-weight: normal;
  src: url('../fonts/infini/infini-italic.eot');
  src: url('../fonts/infini/infini-italic.eot?#iefix') format('embedded-opentype'), url('../fonts/infini/infini-italic.woff') format('woff'), url('../fonts/infini/infini-italic.woff2') format('woff2'), url('../fonts/infini/infini-italic.ttf') format('truetype'), url('../fonts/infini/infini-italic.svg#svgFontName') format('svg');
}

/* Reset
 * https://piccalil.li/blog/a-modern-css-reset/
   ========================================================================== */

*,
*::before,
*::after {
  box-sizing: border-box;
  /* TODO: What's the diff btwn overflow-wrap and word-break? */
  /* overflow-wrap: break-word; */
  /* word-break: break-word; */
  /* TODO: Would I want to set this here? */
  /* hyphens: auto; */
  margin: 0;
  padding: 0;
}

/* Remove default margin */
/* Well, now this is being done to *everything* */
/* body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
} */

body {
  min-height: 100vh;
  padding-block-end: var(--container-space);
  padding-block-start: var(--container-space);
  padding-block: var(--container-space);
}

/**
 * Text measure
 * https://every-layout.dev/rudiments/axioms/#measure
 */
/* * {
  --max-width: var(--text-width);

  max-width: var(--max-width);
}

html,
body,
div,
main,
article,
header,
nav,
footer {
  --max-width: none;
}

h1 {
  --max-width: 20ch;
} */

[hidden] {
  display: none;
}

/* Don't want flow space taking effect here. */
[hidden] + *,
/* This is b/c of injected Browsersync script. */
script + * {
  margin-block-start: 0 !important;
}

html:focus-within {
  scroll-behavior: smooth;
}

:focus {
  /* outline: 2px dashed;
  outline-offset: 0.25rem; */
  outline: var(--border-thin) dashed var(--color-accent);
  outline-offset: var(--border-thin);
}

/* Would this be the same difference? */
/* main:focus { */
[tabindex="-1"]:focus {
  outline: none;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

img {
  height: auto;
}

/* Inherit fonts for inputs and buttons */
/* Instead, we inherit family only on `*` */
/* input,
button,
textarea,
select {
  font: inherit;
} */

iframe {
  width: 100%;
  /* Does having a hardcoded fallback affect Bandcamp embeds? */
  /* aspect-ratio: var(--aspect-ratio, 16 / 9); */
  aspect-ratio: var(--aspect-ratio);
}

/* Allow regular lists to nest properly */
ol:not([role="list"]),
ul:not([role="list"]) {
  padding-inline-start: 1em;
}

ol:not([role="list"]) li::marker {
  color: var(--color-text-muted);
}

ul:not([role="list"]) li::marker {
  color: var(--color-lightish);
  content: var(--list-marker-content, "â€“ ");
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ol[role="list"],
ul[role="list"] {
  list-style: none;
}

::selection {
  color: #fff;
  background: rgba(0, 0, 0, 0.99);
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
   scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Base
   ========================================================================== */

h1,
h2,
h3,
h4 {
  font-family: var(--font-secondary);
  font-variant-numeric: lining-nums;
}

/* stylelint-disable no-duplicate-selectors */
h1 {
  font-size: var(--s2);
  font-weight: normal;
  line-height: 1.1;
}
/* stylelint-enable no-duplicate-selectors */

h2 {
  font-size: inherit;
  font-weight: bold;
  line-height: inherit;
}

h3 {
  color: var(--color-mid);
  font-size: inherit;
  font-weight: bold;
  line-height: inherit;
}

/* Maybe change to a:not(class) or whatever, b/c it messes up inline flex lists */
/* Increase tap target size */
/* a {
  margin: -0.25rem;
  padding: 0.25rem;
} */

/* `a` elements that don't have a class get default styles */
a:not([class]) {
  color: currentColor;
  text-decoration-skip-ink: auto;
}

a:hover {
  text-decoration: none;
}

/* `!important` to override Prism.js */
code,
pre {
  font-family: var(--font-mono) !important;
  font-size: 0.95em !important;
  margin-block-end: 0 !important;
}

pre {
  overflow-x: auto;
}

blockquote {
  border-inline-start: 4px solid var(--color-lightish);
  margin-inline-start: var(--s0);
  padding-inline-start: var(--s0);
}

figcaption {
  margin-top: var(--s0);
}

/* Site/page-level blocks
   ========================================================================== */

.site-nav__list {
  --max-width: none;

  column-gap: var(--s1);
  display: flex;
  flex-wrap: wrap;
}

.site-nav__item > a[aria-current="page"],
.site-nav__item > a[data-state="active"] {
  font-weight: bold;
}

/* Post/article block
   ========================================================================== */

.post {
  /* --flow-space: var(--s2); */

  hanging-punctuation: first;
}

/* .post > * + * {
  margin-top: var(--flow-space, var(--s2));
} */

/* Extra block space surrounding figures */
.prose-flow > figure,
.prose-flow > figure + * {
  --flow-space: var(--flow-expanded);
}

/* Extra block start space on headings */
.prose-flow > :is(h2, h3) {
  --flow-space: var(--flow-expanded);
}

/* Less block start space on elems following headings */
.prose-flow > :is(h2, h3) + * {
  --flow-space: var(--s0);
}

/* Less flow space between sibling paragraphs */
.prose-flow > p + p {
  --flow-space: var(--s0);
}

/* Add flow space to things inside of list items */
.prose-flow :not([role="list"]) li > ol,
.prose-flow :not([role="list"]) li > ul,
.prose-flow :not([role="list"]) li > * + *,
.prose-flow ol:not(.list-condensed, [role="list"]) > * + *,
.prose-flow ul:not(.list-condensed, [role="list"]) > * + * {
/* .post ol > * + *,
.post ul > * + * { */
  margin-block-start: var(--s0);
}

.list-condensed > * + * {
  margin-block-start: var(--s01);
}

.post__meta {
  color: var(--color-text-muted);
  display: flex;
  flex-wrap: wrap;
  font-size: var(--font-size-small);
  margin-block-start: var(--s01);
}

/* If meta label is not `visually-hidden`, we need a space after it */
/* .post__meta dt:not([.visually-hidden])::after { */
.post__meta dt::after {
  content: "\00a0";
}

.post__meta dd:not(:last-of-type)::after {
  content: "/";
  padding-inline-start: var(--s02);
  padding-inline-end: var(--s02);
  padding-inline: var(--s02);
}

.post figcaption {
  color: var(--color-text-muted);
  font-size: var(--font-size-small);
}

.grid-sticky-thirds {
  display: grid;
  gap: var(--s0) var(--s1);
  /* margin-block-start: var(--s4); */
}

/* .grid-thirds + .grid-thirds {
  margin-block-start: var(--s4);
} */

@media (min-width: 700px) {
  .grid-sticky-thirds {
    grid-template-columns: 1fr 2fr;
  }

  .grid-sticky-thirds > h2 {
    align-self: start;
    position: sticky;
    inset-block-start: var(--s0);
  }
}

.wrapper {
  /* --max-width: var(--max-width, var(--container-width)); */

  margin-inline-end: auto;
  margin-inline-start: auto;
  margin-inline: auto;
  max-width: var(--max-width, var(--container-width));
  padding-inline-end: var(--container-space);
  padding-inline-start: var(--container-space);
  padding-inline: var(--container-space);
}

/* .wrapper > * {
  --max-width: var(--text-width);

  max-width: var(--max-width);
} */

.prose-width > * {
  /* max-width: var(--prose-width, var(--text-width)); */
  max-width: var(--text-width);
}

/* .grid-thirds__heading {
}

.grid-thirds {
} */

.image-row {
  display: flex;
  gap: var(--s01);
}

.align-full-bleed {
  /* --prose-width: none; */
  max-width: none;
  margin-inline-end: calc(var(--container-space) * -1);
  margin-inline-start: calc(var(--container-space) * -1);
  margin-inline: calc(var(--container-space) * -1);
}

.align-full-bleed > figcaption {
  max-width: var(--text-width);
  /* Add inline padding to offset pulled inline margins on `figure`. */
  padding-inline-end: var(--container-space);
  padding-inline-start: var(--container-space);
  padding-inline: var(--container-space);
}

.site-footer::before {
  border-top: 2px solid var(--color-lightish);
  content: "";
  width: 100%;
  display: inline-block;
}

.site-footer > :first-child {
  padding-block-start: var(--flow-space);
}

/**
 * Flow space
 * https://every-layout.dev/layouts/stack/
 * https://piccalil.li/quick-tip/flow-utility/
 */
.flow > * + * {
  margin-block-start: var(--flow-space, 1em);
}

/**
 * Use these for nested flow, like on the body; can't set `--flow-space`
 * on `articles-list` *and* `post`, b/c it'll be overridden.
 */
.flow-condensed > * + * {
  margin-block-start: var(--flow-condensed);
}

.flow-expanded > * + * {
  margin-block-start: var(--flow-expanded);
}

.flow-super > * + * {
  margin-block-start: var(--flow-super);
}

/* Use this to increase flow space around an individual element */
.flow-item-expanded,
.flow-item-expanded + * {
  --flow-space: var(--flow-expanded);
}

/* https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html */
.visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.list-inline {
  /* --max-width: none; */

  display: flex;
  column-gap: var(--s1);
}

.text-small {
  color: var(--color-text-muted);
  font-size: var(--font-size-small);
  line-height: 1.5;
}

/**
 * Nicked from Cloud Four
 * https://cloudfour-patterns.netlify.app/patterns/utilities.html
 */

.hidden-til-focus:not(:focus) {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  height: 1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

/* If we end up using this elsewhere, we'll put it in an external file */
@media (min-width: 600px) {
  .title-date-inline {
    display: grid;
  }

  .title-date-inline span {
    display: initial;
  }
}

.title-date-inline {
  color: currentColor;
  grid-template-columns: 1fr max-content;
  text-decoration: none;
}

.title-date-inline span {
  text-decoration: underline;
  display: block;
}

.title-date-inline:hover span {
  text-decoration: none;
}
